#!/usr/bin/env python3
  2 #Kazoo
  3
  4 from kazoo.client import KazooClient
  5 from kazoo.client import NodeExistsError
  6 from threading import Semaphore
  7 import json
  8 import ast
  9
 10 def decode(value):
 11     return ast.literal_eval(value.decode())
 12 def encode(value):
 13     return json.dumps(value, indent=2).encode("utf-8")
 14 def get_leader(client,node):
 15     value = client.get(node)[0]
 16     if value == None:
 17         return decode(struct(""))
 18     elif value.decode() == "":
 19         return decode(struct(""))
 20     return decode(value)
 21
 22 def leadership(client,node,wait):
 23     print("You a leader")
 24     try:
 25         while True:
 26             print("",end="")
 27     except KeyboardInterrupt:
 28         print("Quit")
 29         wait.release()
 30         client.set(node,struct("name",0))
 31
 32 def wait_leader(name,client,node,wait):
 33     while get_leader(client,node)["code"] == 1:
 34         print("",end="")
 35     try_leadership(name,client,node,wait)
 36
 37 def try_leadership(name,client,node,wait):
 38     leader = get_leader(client,node)
 39     print("Try be leader")
 40     if leader["code"] == 0:
 41         print(name)
 42         zk.set(znode, name)
 43         leader = get_leader(client,node)
 44         if leader["name"] == name.decode():
 45             leadership(client,node,wait)
 46     wait_leader(name,client,node,wait)
 47
 48 def struct(name, code = 1):
 49     #1 wait, 0 release
 50     return encode({"name":name, "code": code})
 51
                                                                                                                                                                                               30,41        Topo
  1 #!/usr/bin/env python3
  2 #Kazoo
  3
  4 from kazoo.client import KazooClient
  5 from kazoo.client import NodeExistsError
  6 from threading import Semaphore
  7 import json
  8 import ast
  9
 10 def decode(value):
 11     return ast.literal_eval(value.decode())
 12 def encode(value):
 13     return json.dumps(value, indent=2).encode("utf-8")
 14 def get_leader(client,node):
 15     value = client.get(node)[0]
 16     if value == None:
 17         return decode(struct(""))
 18     elif value.decode() == "":
 19         return decode(struct(""))
 20     return decode(value)
 21
 22 def leadership(client,node,wait):
 23     print("You a leader")
 24     try:
 25         while True:
 26             print("",end="")
 27     except KeyboardInterrupt:
 28         print("Quit")
 29         wait.release()
 30         client.set(node,struct("name",0))
 31
 32 def wait_leader(name,client,node,wait):
 33     while get_leader(client,node)["code"] == 1:
 34         print("",end="")
 35     try_leadership(name,client,node,wait)
 36
 37 def try_leadership(name,client,node,wait):
 38     leader = get_leader(client,node)
 39     print("Try be leader")
 40     if leader["code"] == 0:
 41         print(name)
 42         zk.set(znode, name)
 43         leader = get_leader(client,node)
 44         if leader["name"] == name.decode():
 45             leadership(client,node,wait)
 46     wait_leader(name,client,node,wait)
 47
 48 def struct(name, code = 1):
 49     #1 wait, 0 release
 50     return encode({"name":name, "code": code})
 51
 52 #create a client
 53 zk = KazooClient() #localhost: 2181
 54 zk.start()